"""
FlipShip Product Manager
Handles product creation, management, and optimization for the FlipShip storefront
"""

import json
import time
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from dataclasses import dataclass, asdict
import uuid
import logging

logger = logging.getLogger(__name__)

@dataclass
class FlipShipProduct:
    """FlipShip product data structure"""
    product_id: str
    title: str
    optimized_title: str
    price: float
    compare_at_price: float
    cost_price: float
    profit_margin: float
    profit_percentage: float
    description: str
    images: List[str]
    category: str
    subcategory: str
    tags: List[str]
    condition: str
    source: Dict
    seo: Dict
    inventory: Dict
    shipping: Dict
    status: str
    created_at: str
    updated_at: str
    fliphawk_data: Dict
    performance_metrics: Dict

class FlipShipProductManager:
    """Manages FlipShip product catalog and operations"""
    
    def __init__(self, markup_percentage: float = 35.0):
        self.markup_percentage = markup_percentage
        self.products = []
        self.product_index = {}
        self.categories = set()
        self.tags = set()
        
    def create_product_from_opportunity(self, opportunity_data: Dict) -> FlipShipProduct:
        """Create FlipShip product from FlipHawk opportunity"""
        try:
            # Generate unique product ID
            product_id = f"FS_{int(time.time())}_{uuid.uuid4().hex[:8]}"
            
            # Calculate pricing
            source_cost = float(opportunity_data.get('total_cost', 0))
            flipship_price = round(source_cost * (1 + self.markup_percentage / 100), 2)
            compare_price = round(flipship_price * 1.15, 2)  # Show 15% higher "was" price
            profit_margin = flipship_price - source_cost
            profit_percentage = (profit_margin / flipship_price) * 100 if flipship_price > 0 else 0
            
            # Optimize title for SEO and conversion
            optimized_title = self._optimize_product_title(opportunity_data.get('title', ''))
            
            # Generate product description
            description = self._generate_product_description(opportunity_data)
            
            # Generate tags
            tags = self._generate_product_tags(opportunity_data)
            
            # SEO optimization
            seo_data = self._generate_seo_data(opportunity_data, optimized_title)
            
            # Create product object
            product = FlipShipProduct(
                product_id=product_id,
                title=opportunity_data.get('title', ''),
                optimized_title=optimized_title,
                price=flipship_price,
                compare_at_price=compare_price,
                cost_price=source_cost,
                profit_margin=profit_margin,
                profit_percentage=round(profit_percentage, 2),
                description=description,
                images=[opportunity_data.get('image_url', '')],
                category=opportunity_data.get('category', 'General'),
                subcategory=opportunity_data.get('subcategory', 'Other'),
                tags=tags,
                condition=opportunity_data.get('condition', 'Unknown'),
                source={
                    'platform': 'eBay',
                    'url': opportunity_data.get('ebay_link', ''),
                    'item_id': opportunity_data.get('item_id', ''),
                    'seller_rating': opportunity_data.get('seller_rating', ''),
                    'confidence_score': opportunity_data.get('confidence_score', 0)
                },
                seo=seo_data,
                inventory={
                    'quantity': 1,
                    'sku': f"FS-{opportunity_data.get('category', 'GEN')[:3].upper()}-{product_id[-8:]}",
                    'track_quantity': True,
                    'allow_backorder': False
                },
                shipping={
                    'weight': 1.0,
                    'requires_shipping': True,
                    'shipping_cost': 0,  # Free shipping built into price
                    'processing_time': '1-2 business days',
                    'shipping_time': '3-7 business days'
                },
                status='active',
                created_at=datetime.now().isoformat(),
                updated_at=datetime.now().isoformat(),
                fliphawk_data={
                    'scan_id': opportunity_data.get('scan_id', ''),
                    'scan_date': opportunity_data.get('listing_date', ''),
                    'matched_keyword': opportunity_data.get('matched_keyword', ''),
                    'original_confidence': opportunity_data.get('confidence_score', 0)
                },
                performance_metrics={
                    'views': 0,
                    'clicks': 0,
                    'add_to_cart': 0,
                    'purchases': 0,
                    'conversion_rate': 0.0,
                    'revenue': 0.0
                }
            )
            
            # Add to catalog
            self._add_product_to_catalog(product)
            
            logger.info(f"Created FlipShip product: {product_id}")
            return product
            
        except Exception as e:
            logger.error(f"Error creating FlipShip product: {e}")
            raise
    
    def _optimize_product_title(self, original_title: str) -> str:
        """Optimize product title for SEO and conversion"""
        if not original_title:
            return "Premium Product"
        
        # Remove eBay-specific noise words
        noise_words = [
            'l@@k', 'wow', 'rare find', 'must see', 'nr', 'no reserve',
            'look', 'check out', 'amazing', 'awesome', 'incredible'
        ]
        
        title = original_title
        for noise in noise_words:
            title = re.sub(noise, '', title, flags=re.IGNORECASE)
        
        # Clean up extra spaces and punctuation
        title = ' '.join(title.split())
        title = re.sub(r'[!]{2,}', '!', title)
        title = re.sub(r'[?]{2,}', '?', title)
        title = title.strip('.,!?-')
        
        # Add conversion-focused prefixes if appropriate
        conversion_prefixes = {
            'new': 'Brand New',
            'vintage': 'Authentic Vintage',
            'rare': 'Rare Collectible',
            'limited': 'Limited Edition'
        }
        
        title_lower = title.lower()
        for keyword, prefix in conversion_prefixes.items():
            if keyword in title_lower and not title.startswith(prefix):
                title = f"{prefix} {title}"
                break
        
        # Ensure reasonable length
        if len(title) > 70:
            title = title[:67] + '...'
        
        return title
    
    def _generate_product_description(self, opportunity_data: Dict) -> str:
        """Generate compelling product description"""
        title = opportunity_data.get('title', 'Product')
        category = opportunity_data.get('category', 'Item')
        subcategory = opportunity_data.get('subcategory', '')
        condition = opportunity_data.get('condition', 'Good')
        confidence = opportunity_data.get('confidence_score', 0)
        
        # Extract key features from title
        title_words = title.split()
        key_features = [word for word in title_words if len(word) > 3 and word.isalpha()][:5]
        
        description = f"""
**{title}**

**Condition:** {condition}  
**Category:** {category} › {subcategory}  
**Quality Score:** {confidence}% Verified

### Product Highlights
• Premium {category.lower()} item carefully selected by our team
• {condition} condition with detailed quality verification
• Fast processing and secure shipping included
• 30-day satisfaction guarantee

### Why Choose This Item?
✅ **Quality Verified** - Each item undergoes rigorous quality checks  
✅ **Trusted Sourcing** - Sourced from verified sellers with excellent ratings  
✅ **Fast Shipping** - Quick processing with tracking included  
✅ **Customer First** - 30-day return policy for your peace of mind  
✅ **Best Value** - Competitive pricing on authentic products  

### Key Features
{chr(10).join([f"• {feature.title()}" for feature in key_features[:4]])}

### Shipping & Returns
- **Processing Time:** 1-2 business days
- **Shipping:** Free shipping with tracking
- **Returns:** 30-day return policy
- **Support:** Dedicated customer service team

*This item has been carefully curated using our advanced product discovery system to ensure quality and value.*

---
**Questions?** Our customer service team is here to help with any inquiries about this product.
        """.strip()
        
        return description
    
    def _generate_product_tags(self, opportunity_data: Dict) -> List[str]:
        """Generate relevant tags for product discovery"""
        tags = []
        
        # Category and subcategory tags
        category = opportunity_data.get('category', '').lower()
        subcategory = opportunity_data.get('subcategory', '').lower()
        
        if category:
            tags.append(category)
        if subcategory:
            tags.append(subcategory)
        
        # Condition-based tags
        condition = opportunity_data.get('condition', '').lower()
        if 'new' in condition:
            tags.extend(['new', 'brand-new', 'unused', 'mint'])
        elif 'like new' in condition:
            tags.extend(['like-new', 'excellent', 'near-mint'])
        elif 'very good' in condition:
            tags.extend(['very-good', 'great-condition'])
        
        # Confidence-based tags
        confidence = opportunity_data.get('confidence_score', 0)
        if confidence >= 90:
            tags.append('premium-quality')
        elif confidence >= 80:
            tags.append('high-quality')
        elif confidence >= 70:
            tags.append('good-quality')
        
        # Price-based tags
        profit = opportunity_data.get('estimated_profit', 0)
        if profit >= 50:
            tags.append('great-value')
        elif profit >= 30:
            tags.append('good-deal')
        
        # Title-based tags
        title = opportunity_data.get('title', '').lower()
        
        # Brand detection
        brands = [
            'apple', 'samsung', 'nike', 'adidas', 'sony', 'microsoft',
            'nintendo', 'pokemon', 'marvel', 'disney', 'supreme', 'gucci'
        ]
        for brand in brands:
            if brand in title:
                tags.append(brand)
                tags.append('branded')
                break
        
        # Special keywords
        special_keywords = {
            'vintage': ['vintage', 'retro', 'classic'],
            'collectible': ['collectible', 'rare', 'limited'],
            'gaming': ['gaming', 'game', 'console'],
            'tech': ['tech', 'electronic', 'digital'],
            'fashion': ['fashion', 'style', 'trendy']
        }
        
        for tag, keywords in special_keywords.items():
            if any(keyword in title for keyword in keywords):
                tags.append(tag)
        
        # Remove duplicates and limit
        tags = list(set(tags))[:15]
        
        return tags
    
    def _generate_seo_data(self, opportunity_data: Dict, optimized_title: str) -> Dict:
        """Generate SEO metadata for product"""
        category = opportunity_data.get('category', 'Product')
        condition = opportunity_data.get('condition', 'Quality')
        
        meta_title = f"{optimized_title} - Best Price & Fast Shipping | FlipShip"
        meta_description = f"Buy {optimized_title} in {condition} condition. Premium {category.lower()} with fast shipping, 30-day returns, and satisfaction guarantee. Order now!"
        
        # Extract keywords from title and category
        title_words = optimized_title.lower().split()
        keywords = [word for word in title_words if len(word) > 3]
        keywords.extend([category.lower(), condition.lower(), 'buy', 'online', 'fast shipping', 'best price'])
        
        return {
            'meta_title': meta_title[:60],  # Keep under 60 chars
            'meta_description': meta_description[:160],  # Keep under 160 chars
            'keywords': list(set(keywords))[:20],
            'og_title': optimized_title,
            'og_description': f"Premium {category} in {condition} condition",
            'structured_data': {
                '@type': 'Product',
                'name': optimized_title,
                'category': category,
                'condition': condition,
                'brand': 'FlipShip'
            }
        }
    
    def _add_product_to_catalog(self, product: FlipShipProduct):
        """Add product to internal catalog"""
        self.products.append(product)
        self.product_index[product.product_id] = product
        self.categories.add(product.category)
        self.tags.update(product.tags)
    
    def get_products(self, page: int = 1, limit: int = 20, category: str = 'all', 
                    status: str = 'active') -> Dict:
        """Get paginated products with filtering"""
        # Filter products
        filtered_products = [p for p in self.products if p.status == status]
        
        if category != 'all':
            filtered_products = [p for p in filtered_products if p.category.lower() == category.lower()]
        
        # Sort by creation date (newest first)
        filtered_products.sort(key=lambda x: x.created_at, reverse=True)
        
        # Paginate
        start = (page - 1) * limit
        end = start + limit
        page_products = filtered_products[start:end]
        
        return {
            'products': [asdict(p) for p in page_products],
            'pagination': {
                'page': page,
                'limit': limit,
                'total': len(filtered_products),
                'pages': (len(filtered_products) + limit - 1) // limit,
                'has_next': end < len(filtered_products),
                'has_prev': page > 1
            },
            'filters': {
                'category': category,
                'status': status
            }
        }
    
    def get_featured_products(self, limit: int = 8) -> List[Dict]:
        """Get featured products for homepage"""
        # Get high-confidence, high-profit products
        featured = [
            p for p in self.products 
            if p.status == 'active' and 
               p.fliphawk_data.get('original_confidence', 0) >= 80 and
               p.profit_margin >= 25
        ]
        
        # Sort by profit margin and confidence
        featured.sort(key=lambda x: (x.profit_margin, x.fliphawk_data.get('original_confidence', 0)), reverse=True)
        
        return [asdict(p) for p in featured[:limit]]
    
    def get_product_by_id(self, product_id: str) -> Optional[Dict]:
        """Get single product by ID"""
        product = self.product_index.get(product_id)
        return asdict(product) if product else None
    
    def update_product_performance(self, product_id: str, metric: str, value: float = 1):
        """Update product performance metrics"""
        product = self.product_index.get(product_id)
        if product:
            product.performance_metrics[metric] += value
            product.updated_at = datetime.now().isoformat()
            
            # Calculate conversion rate
            if product.performance_metrics['views'] > 0:
                product.performance_metrics['conversion_rate'] = (
                    product.performance_metrics['purchases'] / 
                    product.performance_metrics['views'] * 100
                )
    
    def get_analytics_data(self) -> Dict:
        """Get analytics overview"""
        if not self.products:
            return {
                'total_products': 0,
                'total_revenue': 0,
                'average_profit_margin': 0,
                'top_categories': [],
                'conversion_rate': 0
            }
        
        active_products = [p for p in self.products if p.status == 'active']
        
        total_revenue = sum(p.performance_metrics.get('revenue', 0) for p in active_products)
        avg_profit_margin = sum(p.profit_percentage for p in active_products) / len(active_products)
        
        # Top categories by product count
        category_counts = {}
        for product in active_products:
            category_counts[product.category] = category_counts.get(product.category, 0) + 1
        
        top_categories = sorted(category_counts.items(), key=lambda x: x[1], reverse=True)[:5]
        
        # Overall conversion rate
        total_views = sum(p.performance_metrics.get('views', 0) for p in active_products)
        total_purchases = sum(p.performance_metrics.get('purchases', 0) for p in active_products)
        conversion_rate = (total_purchases / total_views * 100) if total_views > 0 else 0
        
        return {
            'total_products': len(active_products),
            'total_revenue': round(total_revenue, 2),
            'average_profit_margin': round(avg_profit_margin, 2),
            'top_categories': top_categories,
            'conversion_rate': round(conversion_rate, 2),
            'categories_available': list(self.categories),
            'total_tags': len(self.tags)
        }
    
    def initialize_sample_products(self):
        """Initialize with sample products for demo"""
        sample_opportunities = [
            {
                'title': 'Apple AirPods Pro 2nd Generation with MagSafe Case',
                'total_cost': 189.99,
                'category': 'Tech',
                'subcategory': 'Headphones',
                'condition': 'New',
                'confidence_score': 92,
                'image_url': 'https://via.placeholder.com/400x300/2563eb/ffffff?text=AirPods+Pro',
                'ebay_link': 'https://ebay.com/item/sample1',
                'item_id': 'sample_1',
                'seller_rating': '99.2%',
                'estimated_profit': 45.50,
                'matched_keyword': 'airpods pro'
            },
            {
                'title': 'Nintendo Switch OLED Model Console Bundle',
                'total_cost': 299.99,
                'category': 'Gaming',
                'subcategory': 'Consoles',
                'condition': 'Like New',
                'confidence_score': 88,
                'image_url': 'https://via.placeholder.com/400x300/10b981/ffffff?text=Switch+OLED',
                'ebay_link': 'https://ebay.com/item/sample2',
                'item_id': 'sample_2',
                'seller_rating': '98.5%',
                'estimated_profit': 67.25,
                'matched_keyword': 'nintendo switch oled'
            },
            {
                'title': 'Pokemon Base Set Charizard PSA 9',
                'total_cost': 850.00,
                'category': 'Collectibles',
                'subcategory': 'Trading Cards',
                'condition': 'Mint',
                'confidence_score': 95,
                'image_url': 'https://via.placeholder.com/400x300/f59e0b/ffffff?text=Charizard+PSA+9',
                'ebay_link': 'https://ebay.com/item/sample3',
                'item_id': 'sample_3',
                'seller_rating': '99.8%',
                'estimated_profit': 312.75,
                'matched_keyword': 'charizard psa 9'
            }
        ]
        
        for opportunity in sample_opportunities:
            try:
                self.create_product_from_opportunity(opportunity)
            except Exception as e:
                logger.error(f"Error creating sample product: {e}")
        
        logger.info(f"Initialized {len(sample_opportunities)} sample products")
